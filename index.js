'use strict'

const fs = require('fs');
const path = require('path');

/**
 * InterpolateSWPlugin is a webpack plugin that will replace in your own service worker the following variables:
 * 
 *  - "%SW_CACHE_VERSION%": An automatically generated version for your cache. Use "%SW_CACHE_VERSION%"" variable in your SW. Please note the double quotes around "%SW_CACHE_VERSION%":
 *    
 *      caches.open('cache-name-v' + '"%SW_CACHE_VERSION%""')...
 * 
 *  - "%SW_ASSET_FILES%": The coma-separated list of assets generated by webpack for pre-cache purposes. Use "%SW_ASSET_FILES%" variable in your SW. Please note the double quotes around "%SW_ASSET_FILES%":
 * 
 *      cache.addAll(["%SW_ASSET_FILES%"]);
 * 
 * Notes:
 * 
 *  - When developing with webpack dev server, the file will be watched for changes.
 *  - When building assets, the file will be interpolated and copied to the destination folder configured in your webpack config.
 * 
 * Usage:
 * 
 *  const path = require('path');
 *  const InterpolateSWPlugin = require('./webpack.interpolate.sw.plugin');
 *
 *  var webpackConfig = {
 *    ...
 *    plugins: [
 *      new InterpolateSWPlugin({
 *        // Your source sw template full path. File having variables to be replaced.
 *        from: path.resolve(__dirname, './public/sw.js'),
 *        // Destination file inside your build directory. This file will have variables replaced already.
 *        to: 'sw.js',
 *        // Activate or deactivate replacement of the version variable %SW_CACHE_VERSION%
 *        replaceCacheVersion: true | false,
 *        // Activate or deactivate replacement of the files variable %SW_ASSET_FILES%
 *        replaceAssetFiles: true | false,
 *        // This config will replace your own Service Worker with a dummy one (if true)
 *        // effectively deactivates all service worker functionalities.
 *        deactivateSW: true,
 *      }),
 *    ]
 *  };
 */
class InterpolateSWPlugin {
  constructor(options) {

    let defaults = {
      from: '',
      to: '',
      replaceCacheVersion: false,
      replaceAssetFiles: false,
      deactivateSW: false,
    };

    this.options = Object.assign(defaults, options);

    this.DEACTIVATE_SW_FILE = path.resolve(__dirname, './src/deactivatesw.js');

  }

  /**
   * Verifies we have all necesary configuration
   */
  _validOptions(options) {

    if (!options || 
        !options.from || !options.from.length ||
        !options.to   || !options.to.length) {
          return false;
        }

    return true;
  }

  /**
   * Gets a comma-separated list of compiled assets by webpack.
   * 
   * @param {object} compilation: currentwebpack compilation object.
   * @param {object} options: internal options object provided by this.applyOptions().
   */
  _getCommaSeparatedAssetList (compilation, options) {

    let assetList = '';
    
    if (compilation && compilation.assets) {

      assetList = Object
        .keys(compilation.assets)
        .filter(asset => asset !== options.to)
        .map(asset => '"' + asset + '"')
        .join(',\n');

    }

    return assetList;
      
  }

  /**
   * Make interpolations to the service worker, and copy it from origin to destination.
   * 
   * @param {object} compilation: Webpack compilation object provided by webpack compiler.
   * @param {object} options: internal options object provided by this.applyOptions().
   * @param {fn} callback: Webpack callbak to be called once task is finished. Provided by webpack plugin event.
   */
  _interpolateSW (compilation, options, callback) {
    
    // If we do not have all necesary configuration we exit
    if (!this._validOptions(options)) {
      console.log('InterpolateSWPlugin error: invalid options in: ', options);
      callback();
      return;
    }

    fs.readFile(options.from, 'utf8', (error, fileContent) => {
      
      if (error) {
        console.log('InterpolateSWPlugin error: from file not found (' + options.from + '). Make sure it is a full path and not a relative path.');
        callbak();
        return;
      }

      if (options.replaceAssetFiles === true) {
        fileContent = fileContent.replace(/"%SW_ASSET_FILES%"/gi, this._getCommaSeparatedAssetList (compilation, options));
      }

      if (options.replaceCacheVersion === true) {
        fileContent = fileContent.replace(/"%SW_CACHE_VERSION%"/gi, new Date().getTime());
      }

      // Insert this destination file into the Webpack build as a new file asset
      compilation.assets[options.to] = {
        source: function() {
          return fileContent;
        },
        size: function() {
          return fileContent.length;
        }
      };
        
      callback();
    
    });
  }

  /**
   * Apply options will alter the configuration based on the feature-like options in the configuration
   * 
   * For example, if user deactivates SW, configuration will also alter in here to avoid reaplcing anything
   * 
   */
  applyOptions () {

    // Prevent the modification of the original options.
    let options = Object.assign({}, this.options);

    // If user wants to deactivate the SW for convenient dev purposes, replace the sw
    // with a dummy one, so that we can replace a potential-existing previous sw.
    if (options.deactivateSW === true) {

      // Replace SW with a dummy one
      options.from = this.DEACTIVATE_SW_FILE;

      // No need for replacing anything on the dummy SW
      options.replaceAssetFiles = false;
      options.replaceCacheVersion = false;

    }

    return options;
    
  }

  /**
   * Apply will be called by webpack, so we can gain access to the compiler and all the events
   * 
   * @param {*} compiler : Current webpack compiler. This will be passed by webpack
   * 
   */
  apply(compiler) {

    let options = this.applyOptions();
    let _interpolateSW = this._interpolateSW.bind(this);

    compiler.plugin("after-compile", (compilation, callback) => {

      // Avoid watching the original SW when deactivated
      if (options.deactivateSW === false) {
      
        // Add the service worker template to dependecies. Now this file is being watched.
        compilation.fileDependencies.push(options.from);

      }

      _interpolateSW (compilation, options, callback);

    });

  }
}

module.exports = InterpolateSWPlugin;
