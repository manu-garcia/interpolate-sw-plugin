'use strict'

const fs = require('fs');

/**
 * InterpolateSWPlugin is a webpack plugin that will replace in your own service worker the following variables:
 * 
 *  - %SW_CACHE_VERSION%: An automatically generated version for your cache. Use %SW_CACHE_VERSION% variable in your SW:
 *    
 *      caches.open('cache-name-v' + '%SW_CACHE_VERSION%')...
 * 
 *  - %SW_ASSET_FILES%: The coma-separated list of assets generated by webpack for pre-cache purposes. Use %SW_ASSET_FILES% variable in your SW:
 * 
 *      cache.addAll([%SW_ASSET_FILES%]);
 * 
 * Usage:
 * 
 *  const InterpolateSWPlugin = require('./webpack.interpolate.sw.plugin');
 *
 *  var webpackConfig = {
 *    ...
 *    plugins: [
 *      new InterpolateSWPlugin({
 *        // Your source sw template. File having variables to be replaced.
 *        from: './public/sw.js',
 *        // Destination file inside your build directory. This file will have variables replaced already.
 *        to: 'sw.js',
 *        // Activate or deactivate replacement of the version variable %SW_CACHE_VERSION%
 *        replaceCacheVersion: true | false,
 *        // Activate or deactivate replacement of the files variable %SW_ASSET_FILES%
 *        replaceAssetFiles: true | false,
 *      }),
 *    ]
 *  };
 */
class InterpolateSWPlugin {
  constructor(options) {

    let defaults = {
      from: '',
      to: '',
      replaceCacheVersion: false,
      replaceAssetFiles: false,
    };

    this.options = Object.assign(defaults, options);

  }

  /**
   * Verifies we have all necesary configuration
   */
  _validOptions() {

    if (!this.options || 
        !this.options.from || !this.options.from.length ||
        !this.options.to   || !this.options.to.length) {
          return false;
        }

    return true;
  }

  /**
   * Gets a comma-separated list of compiled assets by webpack.
   * 
   * @param {*} compilation: currentwebpack compilation object.
   */
  _getCommaSeparatedAssetList (compilation) {

    let assetList = '';
    
    if (compilation && compilation.assets) {
      // Loop through all assets, adding them to the list.
      for (let assetName of Object.keys(compilation.assets)) {
        assetList += ("\"" + assetName + "\",\n");
      }

      // Remove last new line and comma
      if (assetList.length > 0) {
        assetList = assetList.slice(0, -2);
      }

    }

    return assetList;
      
  }

  /**
   * Apply will be called by webpack, so we can gain access to the compiler and all the events
   * 
   * @param {*} compiler : Current webpack compiler. This will be passed by webpack
   * 
   */
  apply(compiler) {

    let options = this.options;
    let _validOptions = this._validOptions.bind(this);
    let _getCommaSeparatedAssetList = this._getCommaSeparatedAssetList.bind(this);

    // Last chance to add new asset in emit.
    compiler.plugin('emit', function(compilation, callback) {

      // If we do not have all necesary configuration we exit
      if (!_validOptions()) {
        console.log('InterpolateSWPlugin error: invalid options in: ', options);
        callback();
        return;
      }

      fs.readFile(options.from, 'utf8', (error, fileContent) => {
        
        if (error) {
          console.log('InterpolateSWPlugin error: from file not found (' + options.from + ')');
          callbak();
          return;
        }

        if (options.replaceAssetFiles) {
          fileContent = fileContent.replace(/%SW_ASSET_FILES%/gi, _getCommaSeparatedAssetList (compilation));
        }

        if (options.replaceCacheVersion) {
          fileContent = fileContent.replace(/%SW_CACHE_VERSION%/gi, new Date().getTime());
        }
        
        // Insert this destination file into the Webpack build as a new file asset
        compilation.assets[options.to] = {
          source: function() {
            return fileContent;
          },
          size: function() {
            return fileContent.length;
          }
        };
    
        callback();

      });

    });
    
  }
}

module.exports = InterpolateSWPlugin;
